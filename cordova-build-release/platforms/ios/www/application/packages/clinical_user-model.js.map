{"version":3,"sources":["meteor://ğŸ’»app/packages/clinical:user-model/lib/user-model.js"],"names":["SimpleSchema","module","link","v","get","User","BaseModel","extend","prototype","_collection","Meteor","users","constructor","document","Object","assign","_transform","displayName","isSelf","username","isTrue","isAlive","user","userId","_id","fullName","givenName","names","split","familyName","length","defaultEmail","getEmails","result","emails","forEach","email","push","address","getPrimaryEmail","isServer","methods","testGetCollaborations","console","log","findOne","getAllCollaborations","UserIdExtension","optional","type","String"],"mappings":"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","file":"/packages/clinical_user-model.js","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport { get } from 'lodash';\n\n/**\n * @summary Represents a User\n * @class User\n * @param {Object} document An object representing a conversation ususally a Mongo document\n */\nUser = BaseModel.extend();\n\n//Assign a reference from Meteor.users to User.prototype._collection so BaseModel knows how to access it\nUser.prototype._collection = Meteor.users;\n\nUser.prototype.constructor = function(document){\n  if (document) {\n    Object.assign(this, document);\n  }\n}\n\n//Add the transform to the collection since Meteor.users is pre-defined by the accounts package\nMeteor.users._transform = function (document) {\n  return new User(document);\n};\n\n\n\n\n/**\n * @summary The personal name of the user account.\n * @memberOf User\n * @name displayName\n * @version 1.2.3\n * @returns {String} A name representation of the user account\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.displayName());\n * ```\n */\n\nUser.prototype.displayName = function () {\n  return this.isSelf() ? \"You\" : this.username;\n};\n\n\nUser.prototype.isTrue = function () {\n  return true;\n};\n\n\nUser.prototype.isAlive = function () {\n  return true;\n};\n\n/**\n * Check if the this user is the current logged in user or the specified user\n * @method isSelf\n * @param   {Object}  user The user to check against\n * @returns {Boolean} Whether or not this user is the same as the specified user\n */\n\n/**\n * @summary Check if the this user is the current logged in user or the specified user.\n * @memberOf User\n * @name isSelf\n * @version 1.2.3\n * @returns {String}\n */\n\nUser.prototype.isSelf = function (user) {\n  var userId = user && user._id || Meteor.userId();\n\n  if (this._id === userId) {\n    return true;\n  }\n};\n\n\n\n\n\n/**\n * @summary Gets the full name of the user.\n * @memberOf User\n * @name fullName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.fullName());\n * ```\n */\nUser.prototype.fullName = function () {\n    // if we're using Auth0\n  if (get(this, 'services.auth0')) {\n    return get(this, 'services.auth0');\n\n    // if we're using an HL7 FHIR HumanName resource\n  } else if (get(this, 'profile.name.text')){\n    // the following assumes a Person, RelatedPerson, or Practitioner resource\n    // which only has a single name specified\n    return get(this, 'profile.name.text');\n\n  } else if (get(this, 'profile.name[0].text')){\n    // the following assumes a Patient resource\n    // where multiple names and aliases may be specified\n    return get(this, 'profile.name[0].text')\n\n    // if we're using traditional Meteor naming convention\n  } else if (get(this, 'profile.fullName')){\n    return get(this, 'profile.fullName');\n  } else {\n    return \"---\";\n  }\n};\n\n\n/**\n * @summary Gets the given (first) name of the user.\n * @memberOf User\n * @name givenName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.givenName());\n * ```\n */\nUser.prototype.givenName = function () {\n  if(get(this, 'profile.name[0].given')){\n    // if we're using an HL7 FHIR HumanName resource\n    return get(this, 'profile.name[0].given');\n  } else if (get(this, 'profile.fullName')){\n    // if we're using traditional Meteor naming convention\n    var fullName = get(this, 'profile.fullName');\n    var names = fullName.split(\" \");\n    return names[0];\n  } else {\n    return \"\";\n  }\n};\n\n\n/**\n * @summary Gets the family (last) name of the user.\n * @memberOf User\n * @name familyName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.familyName());\n * ```\n */\nUser.prototype.familyName = function () {\n  if (get(this, 'profile.name[0].family')) {\n    // if we're using an HL7 FHIR HumanName resource\n    return get(this, 'profile.name[0].family');\n  } else if (get(this, 'profile.fullName')){\n    // if we're using traditional Meteor naming convention\n    var fullName = get(this, 'profile.fullName');\n    var names = fullName.split(\" \");\n    return names[names.length - 1];\n  } else {\n    return \"\";\n  }\n};\n\n/**\n * @summary Gets the default email that an account is associated.  Defined as the first verified email in the emails array.\n * @memberOf User\n * @name defaultEmail\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.defaultEmail());\n * ```\n */\nUser.prototype.defaultEmail = function () {\n  return get(this, 'emails[0].address');\n};\n\n/**\n * Get the default email address for the user\n * @method defaultEmail\n * @returns {String} The users default email address\n */\nUser.prototype.getEmails = function () {\n\n  var result = [];\n\n  if (this && this.emails) {\n    this.emails.forEach(function (email) {\n      result.push(email.address);\n    });\n  }\n\n  if (get(this, 'services.google.email')) {\n    result.push(get(this, 'services.google.email'));\n  }\n\n  if (result.length > 0){\n    return result;\n  } else {\n    return [];\n  }\n};\n\n\nUser.prototype.getPrimaryEmail = function () {\n  if (this.emails) {\n    return get(this, 'emails[0].address');\n  } else {\n    return \"\";\n  }\n};\n\n\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    /**\n     * @summary Write all the User collaborations to the server console log.\n     * @locus Server\n     * @memberOf User\n     * @name /testGetCollaborations\n     * @version 1.2.3\n     * @returns {Array}\n     * @example\n     * ```js\n     * Meteor.call('testGetCollaborations');\n     * ```\n     */\n    testGetCollaborations:function (user){\n       console.log('testGetCollaborations');\n       var user = Meteor.users.findOne({_id: user._id});\n      //  console.log('isAlive', user.isAlive());\n       console.log('getAllCollaborations', user.getAllCollaborations(user));\n       //user.getAllCollaborations(user);\n    }\n  });\n\n  // refreshUserProfileCollaborations = function (){\n  //   User.getAllCollaborations().forEach(function(collaboration){\n  //\n  //   })\n  // }\n}\n\n\n\n//==============================================================================\n// This is a FHIR extension\n\nUserIdExtension = new SimpleSchema({\n  \"userId\": {\n    optional: true,\n    type: String\n  }\n});\n"]}