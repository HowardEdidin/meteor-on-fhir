{"version":3,"sources":["meteor://ðŸ’»app/packages/clinical:user-model/lib/user-model.js"],"names":["SimpleSchema","module","link","v","User","BaseModel","extend","prototype","_collection","Meteor","users","_transform","document","displayName","isSelf","username","isTrue","isAlive","user","userId","_id","fullName","services","auth0","name","profile","text","givenName","given","names","split","familyName","family","length","defaultEmail","emails","address","getEmails","result","forEach","email","push","google","getPrimaryEmail","isServer","methods","testGetCollaborations","console","log","findOne","getAllCollaborations","UserIdExtension","optional","type","String"],"mappings":"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","file":"/packages/clinical_user-model.js","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\n/**\n * @summary Represents a User\n * @class User\n * @param {Object} document An object representing a conversation ususally a Mongo document\n */\nUser = BaseModel.extend();\n\n//Assign a reference from Meteor.users to User.prototype._collection so BaseModel knows how to access it\nUser.prototype._collection = Meteor.users;\n\n//Add the transform to the collection since Meteor.users is pre-defined by the accounts package\nMeteor.users._transform = function (document) {\n  return new User(document);\n};\n\n\n\n\n/**\n * @summary The personal name of the user account.\n * @memberOf User\n * @name displayName\n * @version 1.2.3\n * @returns {String} A name representation of the user account\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.displayName());\n * ```\n */\n\nUser.prototype.displayName = function () {\n  return this.isSelf() ? \"You\" : this.username;\n};\n\n\nUser.prototype.isTrue = function () {\n  return true;\n};\n\n\nUser.prototype.isAlive = function () {\n  return true;\n};\n\n/**\n * Check if the this user is the current logged in user or the specified user\n * @method isSelf\n * @param   {Object}  user The user to check against\n * @returns {Boolean} Whether or not this user is the same as the specified user\n */\n\n/**\n * @summary Check if the this user is the current logged in user or the specified user.\n * @memberOf User\n * @name isSelf\n * @version 1.2.3\n * @returns {String}\n */\n\nUser.prototype.isSelf = function (user) {\n  var userId = user && user._id || Meteor.userId();\n\n  if (this._id === userId) {\n    return true;\n  }\n};\n\n\n\n\n\n/**\n * @summary Gets the full name of the user.\n * @memberOf User\n * @name fullName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.fullName());\n * ```\n */\nUser.prototype.fullName = function () {\n    // if we're using Auth0\n  if (this.services && this.services.auth0) {\n    return this.services.auth0.name;\n\n    // if we're using an HL7 FHIR HumanName resource\n  } else if (this.profile && this.profile.name && this.profile.name.text){\n    // the following assumes a Person, RelatedPerson, or Practitioner resource\n    // which only has a single name specified\n    return this.profile.name.text;\n  } else if (this.profile && this.profile.name){\n    // the following assumes a Patient resource\n    // where multiple names and aliases may be specified\n    return this.profile.name[0].text;\n\n    // if we're using traditional Meteor naming convention\n  } else if (this.profile && this.profile.fullName){\n    return this.profile.fullName;\n  } else {\n    return \"---\";\n  }\n};\n\n\n/**\n * @summary Gets the given (first) name of the user.\n * @memberOf User\n * @name givenName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.givenName());\n * ```\n */\nUser.prototype.givenName = function () {\n  if(this.profile && this.profile.name){\n    // if we're using an HL7 FHIR HumanName resource\n    return this.profile.name[0].given;\n  } else if (this.profile && this.profile.fullName){\n    // if we're using traditional Meteor naming convention\n    var names = this.profile.fullName.split(\" \");\n    return names[0];\n  } else {\n    return \"\";\n  }\n};\n\n\n/**\n * @summary Gets the family (last) name of the user.\n * @memberOf User\n * @name familyName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.familyName());\n * ```\n */\nUser.prototype.familyName = function () {\n  if (this.profile && this.profile.name) {\n    // if we're using an HL7 FHIR HumanName resource\n    return this.profile.name[0].family;\n  } else if (this.profile && this.profile.fullName){\n    // if we're using traditional Meteor naming convention\n    var names = this.profile.fullName.split(\" \");\n    return names[names.length - 1];\n  } else {\n    return \"---\";\n  }\n};\n\n/**\n * @summary Gets the default email that an account is associated.  Defined as the first verified email in the emails array.\n * @memberOf User\n * @name defaultEmail\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.defaultEmail());\n * ```\n */\nUser.prototype.defaultEmail = function () {\n  return this.emails && this.emails[0].address;\n};\n\n/**\n * Get the default email address for the user\n * @method defaultEmail\n * @returns {String} The users default email address\n */\nUser.prototype.getEmails = function () {\n\n  var result = [];\n\n  if (this && this.emails) {\n    this.emails.forEach(function (email) {\n      result.push(email.address);\n    });\n  }\n\n  if (this.services && this.services.google && this.services.google.email) {\n    result.push(this.services.google.email);\n  }\n\n  if (result.length > 0){\n    return result;\n  } else {\n    return [];\n  }\n};\n\n\nUser.prototype.getPrimaryEmail = function () {\n  if (this.emails) {\n    return this.emails[0].address;\n  } else {\n    return \"---\";\n  }\n};\n\n\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    /**\n     * @summary Write all the User collaborations to the server console log.\n     * @locus Server\n     * @memberOf User\n     * @name /testGetCollaborations\n     * @version 1.2.3\n     * @returns {Array}\n     * @example\n     * ```js\n     * Meteor.call('testGetCollaborations');\n     * ```\n     */\n    testGetCollaborations:function (user){\n       console.log('testGetCollaborations');\n       var user = Meteor.users.findOne({_id: user._id});\n      //  console.log('isAlive', user.isAlive());\n       console.log('getAllCollaborations', user.getAllCollaborations(user));\n       //user.getAllCollaborations(user);\n    }\n  });\n\n  // refreshUserProfileCollaborations = function (){\n  //   User.getAllCollaborations().forEach(function(collaboration){\n  //\n  //   })\n  // }\n}\n\n\n\n//==============================================================================\n// This is a FHIR extension\n\nUserIdExtension = new SimpleSchema({\n  \"userId\": {\n    optional: true,\n    type: String\n  }\n});\n"]}