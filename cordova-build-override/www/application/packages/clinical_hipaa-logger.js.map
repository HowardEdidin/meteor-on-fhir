{"version":3,"sources":["meteor://ðŸ’»app/packages/clinical:hipaa-logger/lib/HipaaLog.js","meteor://ðŸ’»app/packages/clinical:hipaa-logger/lib/HipaaLogger.js"],"names":["HipaaLog","Mongo","Collection","allow","insert","userId","doc","update","fields","modifier","remove","HipaaLogger","logEvent","hipaaEvent","check","Object","Meteor","call","error","result","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA,QAAQ,GAAG,IAAIC,KAAK,CAACC,UAAV,CAAqB,UAArB,CAAX;AAEAF,QAAQ,CAACG,KAAT,CAAe;AACbC,QAAM,EAAE,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC7B;AACA,QAAID,MAAJ,EAAY;AACV,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GARY;AASbE,QAAM,EAAE,UAAUF,MAAV,EAAkBC,GAAlB,EAAuBE,MAAvB,EAA+BC,QAA/B,EAAyC;AAC/C;AACA,WAAO,KAAP;AACD,GAZY;AAabC,QAAM,EAAE,UAAUL,MAAV,EAAkBC,GAAlB,EAAuB;AAC7B;AACA,WAAO,KAAP;AACD,GAhBY,CAiBb;AACA;AACA;;AAnBa,CAAf,E;;;;;;;;;;;ACHA;;;;;;;;;;;;AAcAK,WAAW,GAAG;AAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAC,UAAQ,EAAE,UAASC,UAAT,EAAoB;AAC5BC,SAAK,CAACD,UAAD,EAAaE,MAAb,CAAL;AAEA,WAAOC,MAAM,CAACC,IAAP,CAAY,UAAZ,EAAwBJ,UAAxB,EAAoC,UAAUK,KAAV,EAAiBC,MAAjB,EAAwB;AACjE,UAAID,KAAJ,EAAU;AACRE,eAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACD;;AACD,UAAIC,MAAJ,EAAW;AACR,eAAOA,MAAP;AACF;AACF,KAPM,CAAP;AAQD;AAzCW,CAAd,C","file":"/packages/clinical_hipaa-logger.js","sourcesContent":["\nHipaaLog = new Mongo.Collection(\"HipaaLog\");\n\nHipaaLog.allow({\n  insert: function (userId, doc) {\n    // we can only write to the audit log if we're logged in\n    if (userId) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  update: function (userId, doc, fields, modifier) {\n    // the audit log is write-only\n    return false;\n  },\n  remove: function (userId, doc) {\n    // the audit log is write-only\n    return false;\n  }\n  // fetch: function(userId){\n  //   return true;\n  // }\n});\n\n","/*\nvar hipaaEvent = {\n  eventType: \"\",\n  userId: \"\",\n  userName: \"\",\n  collectionName: \"\",\n  recordId: \"\",\n  patientId: \"\",\n  patientName: \"\",\n  message: \"\"\n};\n*/\n\n\nHipaaLogger = {\n\n  /**\n  * @summary Detects if a specific environment variable was exposed from the server.\n  * @locus Client\n  * @memberOf HipaaLogger\n  * @name logEvent\n  * @param hipaaEvent.eventType\n  * @param hipaaEvent.userId\n  * @param hipaaEvent.userName\n  * @param hipaaEvent.collectionName\n  * @param hipaaEvent.recordId\n  * @param hipaaEvent.patientId\n  * @param hipaaEvent.patientName\n  * @param hipaaEvent.message\n  * @version 1.2.3\n  * @example\n  * ```js\n  * var hipaaEvent = {\n  *   eventType: \"update\",\n  *   userId: Meteor.userId(),\n  *   userName: Meteor.user().fullName(),\n  *   collectionName: \"Medications\",\n  *   recordId: Random.id(),\n  *   patientId: Session.get('currentPatientId'),\n  *   patientName: Session.get('currentPatientName')\n  * };\n  * HipaaLogger.logEvent(hipaaEvent);\n  * ```\n  */\n  logEvent: function(hipaaEvent){\n    check(hipaaEvent, Object);\n\n    return Meteor.call(\"logEvent\", hipaaEvent, function (error, result){\n      if (error){\n        console.log(\"error\", error);\n      }\n      if (result){\n         return result\n      }\n    });\n  }\n};\n"]}