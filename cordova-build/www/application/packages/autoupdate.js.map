{"version":3,"sources":["meteor://ðŸ’»app/packages/autoupdate/autoupdate_cordova.js"],"names":["module","export","Autoupdate","autoupdateVersionsCordova","__meteor_runtime_config__","autoupdate","versions","version","ClientVersions","Mongo","Collection","newClientAvailable","findOne","_id","$ne","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","appId","Meteor","subscribe","onError","error","console","log","retryLater","onReady","Package","reload","checkNewVersionDocument","doc","newVersionAvailable","find","observe","added","changed","startup","WebAppLocalServer","onNewVersionReady","Reload","_reload","checkForUpdates"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,YAAU,EAAC;AAAA,WAAIA,UAAJ;AAAA;AAAZ,CAAd;AAAA,IAAIC,yBAAyB,GAC3BC,yBAAyB,CAACC,UAA1B,CAAqCC,QAArC,CAA8C,aAA9C,KAAgE;AAC9DC,SAAO,EAAE;AADqD,CADlE,C,CAKA;;AACA,IAAMC,cAAc,GAClB,IAAIC,KAAK,CAACC,UAAV,CAAqB,kCAArB,CADF;AAGO,IAAMR,UAAU,GAAG,EAAnB;;AAEPA,UAAU,CAACS,kBAAX,GACE;AAAA,SAAM,CAAC,CAAEH,cAAc,CAACI,OAAf,CAAuB;AAC9BC,OAAG,EAAE,aADyB;AAE9BN,WAAO,EAAE;AACPO,SAAG,EAAEX,yBAAyB,CAACI;AADxB;AAFqB,GAAvB,CAAT;AAAA,CADF;;AAQA,IAAIQ,KAAK,GAAG,IAAIC,KAAJ,CAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,UAAQ,EAAE,CATU;AASP;AACbC,aAAW,EAAE,KAAG,IAVI,CAUC;;AAVD,CAAV,CAAZ;AAaA,IAAIC,QAAQ,GAAG,CAAf;;AAEAjB,UAAU,CAACkB,kBAAX,GAAgC,YAAM;AAAA,6BAClBhB,yBADkB;AAAA,MAC5BiB,KAD4B,wBAC5BA,KAD4B;AAGpCC,QAAM,CAACC,SAAP,CAAiB,kCAAjB,EAAqDF,KAArD,EAA4D;AAC1DG,WAD0D,YAClDC,KADkD,EAC3C;AACbC,aAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,KAA/C;AACAN,cAAQ;AACRJ,WAAK,CAACa,UAAN,CAAiBT,QAAjB,EAA2B,YAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,kBAAU,CAACkB,kBAAX;AACD,OATD;AAUD,KAdyD;AAgB1DS,WAhB0D,cAgBhD;AACR,UAAIC,OAAO,CAACC,MAAZ,EAAoB;AAAA,YACTC,uBADS,GAClB,UAAiCC,GAAjC,EAAsC;AACpC,cAAIA,GAAG,CAAC1B,OAAJ,KAAgBJ,yBAAyB,CAACI,OAA9C,EAAuD;AACrD2B,+BAAmB;AACpB;AACF,SALiB;;AAOlB1B,sBAAc,CAAC2B,IAAf,CAAoB;AAClBtB,aAAG,EAAE;AADa,SAApB,EAEGuB,OAFH,CAEW;AACTC,eAAK,EAAEL,uBADE;AAETM,iBAAO,EAAEN;AAFA,SAFX;AAMD;AACF;AA/ByD,GAA5D;AAiCD,CApCD;;AAsCAV,MAAM,CAACiB,OAAP,CAAe,YAAM;AACnBC,mBAAiB,CAACC,iBAAlB,CAAoC,YAAM;AACxC,QAAIX,OAAO,CAACC,MAAZ,EAAoB;AAClBD,aAAO,CAACC,MAAR,CAAeW,MAAf,CAAsBC,OAAtB;AACD;AACF,GAJD;;AAMAzC,YAAU,CAACkB,kBAAX;AACD,CARD;;AAUA,SAASc,mBAAT,GAA+B;AAC7BM,mBAAiB,CAACI,eAAlB;AACD,C","file":"/packages/autoupdate.js","sourcesContent":["var autoupdateVersionsCordova =\n  __meteor_runtime_config__.autoupdate.versions[\"web.cordova\"] || {\n    version: \"unknown\"\n  };\n\n// The collection of acceptable client versions.\nconst ClientVersions =\n  new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nexport const Autoupdate = {};\n\nAutoupdate.newClientAvailable =\n  () => !! ClientVersions.findOne({\n    _id: \"web.cordova\",\n    version: {\n      $ne: autoupdateVersionsCordova.version\n    }\n  });\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  const { appId } = __meteor_runtime_config__;\n\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError(error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function() {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      if (Package.reload) {\n        function checkNewVersionDocument(doc) {\n          if (doc.version !== autoupdateVersionsCordova.version) {\n            newVersionAvailable();\n          }\n        }\n\n        ClientVersions.find({\n          _id: \"web.cordova\"\n        }).observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(() => {\n  WebAppLocalServer.onNewVersionReady(() => {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nfunction newVersionAvailable() {\n  WebAppLocalServer.checkForUpdates();\n}\n"]}